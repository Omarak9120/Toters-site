import { e as createComponent, f as createAstro, r as renderTemplate, o as renderSlot, p as renderHead, h as addAttribute } from './astro/server_BaLT3vhi.mjs';
import 'kleur/colors';
import 'clsx';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _d, _e, _f, _g, _h;
const $$Astro = createAstro();
const $$Base = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Base;
  const {
    title = "Toters",
    description = "Get anything. Fast.",
    lang = "en",
    dir = "ltr",
    ogImage = "/social/og-home-en.jpg",
    appStoreUrl = "https://apps.apple.com/",
    playStoreUrl = "https://play.google.com/store/apps/details"
  } = Astro2.props;
  const SITE_ENV = Astro2.site?.toString() || "https://www.totersapp.com";
  const site = SITE_ENV;
  const path = Astro2.url.pathname;
  const isAR = lang.startsWith("ar");
  const siteUrl = Astro2.site?.toString().replace(/\/$/, "") || "";
  const ogDynamic = `${siteUrl}/api/og?title=${encodeURIComponent(title)}&subtitle=${encodeURIComponent(description || "")}&lang=${lang}`;
  function ensureLeadingSlash(p) {
    return p.startsWith("/") ? p : `/${p}`;
  }
  const canonical = new URL(
    isAR ? path : ensureLeadingSlash(path),
    site
  ).toString();
  const altEN = new URL(
    path.replace(/^\/ar(\/|$)/, "/"),
    site
  ).toString();
  const altAR = new URL(
    path.startsWith("/ar") ? path : `/ar${ensureLeadingSlash(path)}`.replace(/\/ar\/ar\//, "/ar/"),
    site
  ).toString();
  const ogLocale = isAR ? "ar_LB" : "en_US";
  const ogLocaleAlt = isAR ? "en_US" : "ar_LB";
  ({
    logo: new URL("/assets/logo/toters-logo.svg", site).toString()});
  return renderTemplate(_h || (_h = __template(["<html", "", '> <head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><title>', '</title><meta name="description"', '><!-- Canonical & hreflang --><link rel="canonical"', '><link rel="alternate"', ' hreflang="en"><link rel="alternate"', ' hreflang="ar-LB"><link rel="alternate"', ' hreflang="x-default"><!-- Theme color --><meta name="theme-color" content="#10b981"><!-- Preconnect (optional if using web fonts) --><link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><!-- Favicons (place files under /public) --><link rel="icon" href="/favicon.ico" sizes="any"><link rel="icon" href="/icon.svg" type="image/svg+xml"><link rel="apple-touch-icon" href="/apple-touch-icon.png"><!-- Open Graph --><meta property="og:type" content="website"><meta property="og:site_name" content="Toters"><meta property="og:title"', '><meta property="og:description"', '><meta property="og:image"', '><meta property="og:url"', '><meta property="og:locale"', '><meta property="og:locale:alternate"', '><!-- Twitter --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:title"', '><meta name="twitter:description"', '><meta name="twitter:image"', '><!-- JSON-LD --><script type="application/ld+json">\n      {JSON.stringify(orgJson)}\n    </script><script type="application/ld+json">\n      {JSON.stringify(appJson)}\n    </script><!-- Analytics (Production Only) -->', "", "", "<!-- Astro/Styles -->", "", "</head> <body> ", ' <script type="module">\n      import { initFX } from "../lib/microFX.ts";\n\n      function boot(scope) {\n        try { initFX(scope); } catch (e) { console.error("[FX] init error", e); }\n      }\n\n      if (document.readyState !== "loading") boot();\n      else document.addEventListener("DOMContentLoaded", boot);\n\n      window.addEventListener("astro:page-load", boot);\n      window.addEventListener("astro:after-swap", boot);\n\n      // MutationObserver to catch counters added later\n      try {\n        const mo = new MutationObserver((mut) => {\n          for (const m of mut) {\n            for (const node of m.addedNodes) {\n              if (node instanceof HTMLElement &&\n                  (node.matches?.("[data-count], .counter, .js-count") ||\n                   node.querySelector?.("[data-count], .counter, .js-count"))) {\n                boot();\n                return;\n              }\n            }\n          }\n        });\n        mo.observe(document.body, { childList: true, subtree: true });\n      } catch {}\n    </script> <!-- Analytics (Production Only, Consent-Gated) --> ', " <!-- Sentry (Production Only, Consent-Gated) --> ", " ", " <!-- Cookie Consent Banner (Production Only) --> ", " <!-- Cookie Consent Script (Production Only) --> ", " <!-- Pre-launch QA Script (Dev Only) --> ", ' <!-- QA overlay toggle --> <script type="module">\n      (function () {\n        try {\n          const q = new URLSearchParams(location.search);\n          if (q.get("qa") !== "1") return;\n\n          const css = `\n            .qa-grid { position: fixed; inset: 0; pointer-events: none; z-index: 99999; }\n            .qa-grid::before {\n              content: ""; display: block; width: 100%; height: 100%;\n              background-image: linear-gradient(to right, rgba(0,0,0,.06) 1px, transparent 1px), linear-gradient(to bottom, rgba(0,0,0,.06) 1px, transparent 1px);\n              background-size: 64px 100%, 100% 64px;\n            }\n            .qa-pill {\n              position: fixed; right: 12px; bottom: 12px; z-index: 100000;\n              background: #111; color: #fff; font: 12px system-ui, sans-serif; padding: 8px 10px; border-radius: 10px; opacity: .9;\n            }\n          `;\n          const style = document.createElement("style"); style.textContent = css; document.head.appendChild(style);\n          const grid = document.createElement("div"); grid.className = "qa-grid"; document.body.appendChild(grid);\n          const pill = document.createElement("div"); pill.className = "qa-pill";\n          pill.textContent = `QA overlay on Â· ${document.documentElement.lang || "en"}`;\n          document.body.appendChild(pill);\n        } catch {}\n      })();\n    </script> </body> </html>'], ["<html", "", '> <head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><title>', '</title><meta name="description"', '><!-- Canonical & hreflang --><link rel="canonical"', '><link rel="alternate"', ' hreflang="en"><link rel="alternate"', ' hreflang="ar-LB"><link rel="alternate"', ' hreflang="x-default"><!-- Theme color --><meta name="theme-color" content="#10b981"><!-- Preconnect (optional if using web fonts) --><link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><!-- Favicons (place files under /public) --><link rel="icon" href="/favicon.ico" sizes="any"><link rel="icon" href="/icon.svg" type="image/svg+xml"><link rel="apple-touch-icon" href="/apple-touch-icon.png"><!-- Open Graph --><meta property="og:type" content="website"><meta property="og:site_name" content="Toters"><meta property="og:title"', '><meta property="og:description"', '><meta property="og:image"', '><meta property="og:url"', '><meta property="og:locale"', '><meta property="og:locale:alternate"', '><!-- Twitter --><meta name="twitter:card" content="summary_large_image"><meta name="twitter:title"', '><meta name="twitter:description"', '><meta name="twitter:image"', '><!-- JSON-LD --><script type="application/ld+json">\n      {JSON.stringify(orgJson)}\n    </script><script type="application/ld+json">\n      {JSON.stringify(appJson)}\n    </script><!-- Analytics (Production Only) -->', "", "", "<!-- Astro/Styles -->", "", "</head> <body> ", ' <script type="module">\n      import { initFX } from "../lib/microFX.ts";\n\n      function boot(scope) {\n        try { initFX(scope); } catch (e) { console.error("[FX] init error", e); }\n      }\n\n      if (document.readyState !== "loading") boot();\n      else document.addEventListener("DOMContentLoaded", boot);\n\n      window.addEventListener("astro:page-load", boot);\n      window.addEventListener("astro:after-swap", boot);\n\n      // MutationObserver to catch counters added later\n      try {\n        const mo = new MutationObserver((mut) => {\n          for (const m of mut) {\n            for (const node of m.addedNodes) {\n              if (node instanceof HTMLElement &&\n                  (node.matches?.("[data-count], .counter, .js-count") ||\n                   node.querySelector?.("[data-count], .counter, .js-count"))) {\n                boot();\n                return;\n              }\n            }\n          }\n        });\n        mo.observe(document.body, { childList: true, subtree: true });\n      } catch {}\n    </script> <!-- Analytics (Production Only, Consent-Gated) --> ', " <!-- Sentry (Production Only, Consent-Gated) --> ", " ", " <!-- Cookie Consent Banner (Production Only) --> ", " <!-- Cookie Consent Script (Production Only) --> ", " <!-- Pre-launch QA Script (Dev Only) --> ", ' <!-- QA overlay toggle --> <script type="module">\n      (function () {\n        try {\n          const q = new URLSearchParams(location.search);\n          if (q.get("qa") !== "1") return;\n\n          const css = \\`\n            .qa-grid { position: fixed; inset: 0; pointer-events: none; z-index: 99999; }\n            .qa-grid::before {\n              content: ""; display: block; width: 100%; height: 100%;\n              background-image: linear-gradient(to right, rgba(0,0,0,.06) 1px, transparent 1px), linear-gradient(to bottom, rgba(0,0,0,.06) 1px, transparent 1px);\n              background-size: 64px 100%, 100% 64px;\n            }\n            .qa-pill {\n              position: fixed; right: 12px; bottom: 12px; z-index: 100000;\n              background: #111; color: #fff; font: 12px system-ui, sans-serif; padding: 8px 10px; border-radius: 10px; opacity: .9;\n            }\n          \\`;\n          const style = document.createElement("style"); style.textContent = css; document.head.appendChild(style);\n          const grid = document.createElement("div"); grid.className = "qa-grid"; document.body.appendChild(grid);\n          const pill = document.createElement("div"); pill.className = "qa-pill";\n          pill.textContent = \\`QA overlay on Â· \\${document.documentElement.lang || "en"}\\`;\n          document.body.appendChild(pill);\n        } catch {}\n      })();\n    </script> </body> </html>'])), addAttribute(lang, "lang"), addAttribute(dir, "dir"), title, addAttribute(description, "content"), addAttribute(canonical, "href"), addAttribute(altEN, "href"), addAttribute(altAR, "href"), addAttribute(altEN, "href"), addAttribute(title, "content"), addAttribute(description, "content"), addAttribute(ogDynamic, "content"), addAttribute(canonical, "content"), addAttribute(ogLocale, "content"), addAttribute(ogLocaleAlt, "content"), addAttribute(title, "content"), addAttribute(description, "content"), addAttribute(ogDynamic, "content"), undefined, undefined, undefined, renderSlot($$result, $$slots["head"]), renderHead(), renderSlot($$result, $$slots["default"]), renderTemplate(_d || (_d = __template(['<script type="module">\n        import { wireClicks, track, bootAnalytics, initAnalyticsOnConsent, consentGranted } from "../scripts/analytics.ts";\n        if (consentGranted()) { \n          bootAnalytics(); \n          wireClicks(document); \n          track("page_view", { path: location.pathname, lang: document.documentElement.lang }); \n        }\n        initAnalyticsOnConsent();\n      </script>']))), renderTemplate(_e || (_e = __template(['<script type="module">\n        import { bootSentry } from "../scripts/sentry.ts";\n        window.addEventListener("consent:granted", () => bootSentry());\n        // also boot if consent is already granted\n        try { if (localStorage.getItem("analytics_consent")==="granted") bootSentry(); } catch {}\n      </script>']))), renderTemplate(_f || (_f = __template(['<script type="module">\n        async function ping(url) {\n          try { const r = await fetch(url, { method: "GET", cache: "no-store" }); return r.ok; } catch { return false; }\n        }\n\n        async function run() {\n          const checks = {\n            sitemap: await ping("/sitemap.xml"),\n            robots: await ping("/robots.txt"),\n            og_en: await ping("/social/og-home-en.jpg"),\n            og_ar: await ping("/social/og-home-ar.jpg")\n          };\n          // surface minimally without polluting console\n          window.__smoke = checks;\n        }\n        \n        if (document.readyState !== "loading") run();\n        else document.addEventListener("DOMContentLoaded", run);\n      </script>']))), renderTemplate`<div id="cc" class="fixed inset-x-0 bottom-0 z-50 mx-auto w-full max-w-3xl p-3"> <div class="rounded-2xl bg-white shadow-lg ring-1 ring-black/10 p-4 flex items-start gap-3"> <div class="text-sm text-slate-700">We use cookies for analytics to improve your experience.</div> <div class="ms-auto flex gap-2"> <button id="cc-accept" class="btn btn-primary px-3 py-1 text-sm">Accept</button> <button id="cc-manage" class="btn btn-ghost px-3 py-1 text-sm">Manage</button> </div> </div> </div>`, renderTemplate(_g || (_g = __template(['<script type="module">\n        const key = "analytics_consent";\n        const root = document.getElementById("cc");\n        const have = localStorage.getItem(key);\n        if (have === "granted") root?.remove();\n        \n        document.getElementById("cc-accept")?.addEventListener("click", () => {\n          localStorage.setItem(key, "granted");\n          root?.remove();\n          window.dispatchEvent(new CustomEvent("consent:granted"));\n        });\n        \n        document.getElementById("cc-manage")?.addEventListener("click", () => {\n          localStorage.removeItem(key);\n          location.reload();\n        });\n      </script>']))), false);
}, "C:/Users/Omar Abdelkader/Desktop/omar abdelkader/my_work/Toters_website/toters-site/src/layouts/Base.astro", void 0);

export { $$Base as $ };
